/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package client

import javax.jms.Connection
import javax.jms.ConnectionFactory
import javax.jms.MessageConsumer
import javax.jms.MessageProducer
import javax.jms.Queue
import javax.jms.Session
import javax.jms.TextMessage
import javax.naming.InitialContext

class App {
    val greeting: String
        get() {
            return "Hello world."
        }
}

fun main(args: Array<String>) {
    println(App().greeting)
    var connection: Connection? = null
    var initialContext: InitialContext? = null
    try {
        // Step 1. Create an initial context to perform the JNDI lookup.
        initialContext = InitialContext()

        // Step 2. Look-up the JMS topic
        val queue = initialContext.lookup("queue/exampleQueue") as Queue

        // Step 3. Look-up the JMS connection factory
        val cf = initialContext.lookup("ConnectionFactory") as ConnectionFactory

        // Step 4. Create a JMS connection
        connection = cf.createConnection()

        // Step 5. Start the connection
        connection!!.start()

        // Step 6. Create a transactional JMS session
        val session = connection!!.createSession(true, Session.SESSION_TRANSACTED)

        // Step 7. Create a JMS message producer
        val messageProducer = session.createProducer(queue)

        // Step 8. Create a message consumer
        val messageConsumer = session.createConsumer(queue)

        // Step 9. Create 2 text messages
        val message1 = session.createTextMessage("This is a text message1")
        val message2 = session.createTextMessage("This is a text message2")

        // Step 10. Send the text messages to the queue
        messageProducer.send(message1)
        messageProducer.send(message2)

        System.out.println("Sent message: " + message1.getText())
        System.out.println("Sent message: " + message2.getText())

        // Step 11. Receive the message, it will return null as the transaction is not committed.
        var receivedMessage: TextMessage? = messageConsumer.receive(5000) as TextMessage?

        println("Message received before send commit: " + receivedMessage)

        // Step 12. Commit the session
        session.commit()

        // Step 13. Receive the messages again
        receivedMessage = messageConsumer.receive(5000) as TextMessage

        System.out.println("Message received after send commit: " + receivedMessage!!.getText())

        // Step 14. Roll back the session, this will cause the received message canceled and redelivered again.
        session.rollback()

        // Step 15. Receive the message again, we will get two messages
        receivedMessage = messageConsumer.receive(5000) as TextMessage

        System.out.println("Message1 received after receive rollback: " + receivedMessage!!.getText())

        receivedMessage = messageConsumer.receive(5000) as TextMessage

        System.out.println("Message2 received after receive rollback: " + receivedMessage!!.getText())

        receivedMessage = messageConsumer.receive(5000) as TextMessage?

        println("Message3 received after receive rollback: " + receivedMessage)

        // Step 16. Commit the session
        session.commit()

        // Step 17. Receive the message again. Nothing should be received.
        receivedMessage = messageConsumer.receive(5000) as TextMessage?

        if (receivedMessage != null) {
            // This was not supposed to happen
            throw IllegalStateException("Message is not null.")
        }

        println("Message received after receive commit: " + receivedMessage)

    } finally {
        if (connection != null) {
            // Step 18. Be sure to close our JMS resources!
            connection!!.close()
        }
        initialContext?.close()
    }
}
