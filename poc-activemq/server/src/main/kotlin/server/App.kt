/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package server

import org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory
import org.apache.activemq.artemis.core.config.impl.SecurityConfiguration
import org.apache.activemq.artemis.core.server.ActiveMQServers
import org.apache.activemq.artemis.spi.core.security.ActiveMQJAASSecurityManager
import org.apache.activemq.artemis.spi.core.security.jaas.InVMLoginModule

import java.util.*
import javax.jms.ConnectionFactory
import javax.jms.Queue
import javax.jms.Session
import javax.jms.TextMessage
import javax.naming.InitialContext

open class App

fun main(args: Array<String>) {
   /// SpringApplication.run(App::class.java, *args)
    embeddedExample()
}

fun embeddedExample(){
    // Step 2. Create and start embedded broker.
    val server = ActiveMQServers.newActiveMQServer("broker.xml", null, null)
    server.start()
    println("Started Embedded Broker")

    // InitialContext initialContext = null;
    // Step 3. Create an initial context to perform the JNDI lookup.
    //   initialContext = new InitialContext();

    // Step 4. Look-up the JMS queue
    //Queue queue = (Queue) initialContext.lookup("queue/exampleQueue");


//    // Step 5. Look-up the JMS connection factory
//    val cf = ActiveMQConnectionFactory("vm://0")
//
//    // Step 6. Send and receive a message using JMS API
//    try {
//        cf.createConnection().use { connection ->
//            val session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE)
//            val queue = session.createQueue("exampleQueue")
//            val producer = session.createProducer(queue)
//            val message = session.createTextMessage("Hello sent at " + Date())
//            println("Sending message: " + message.text)
//            producer.send(message)
//            val messageConsumer = session.createConsumer(queue)
//            connection.start()
//            val messageReceived = messageConsumer.receive(1000) as TextMessage
//            println("Received message:" + messageReceived.text)
//        }
//    } finally {
//        // Step 7. Stop the embedded broker.
//        server.stop()
//        println("Stopped the Embedded Broker")
//    }
}
